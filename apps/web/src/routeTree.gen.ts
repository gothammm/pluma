/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as LoginImport } from "./routes/login";
import { Route as AboutImport } from "./routes/about";
import { Route as AuthImport } from "./routes/_auth";
import { Route as IndexImport } from "./routes/index";
import { Route as AuthTransactionsImport } from "./routes/_auth.transactions";
import { Route as AuthSettingsImport } from "./routes/_auth.settings";
import { Route as AuthDashboardImport } from "./routes/_auth.dashboard";
import { Route as AuthCategoriesImport } from "./routes/_auth.categories";
import { Route as AuthAccountsImport } from "./routes/_auth.accounts";

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => rootRoute,
} as any);

const AboutRoute = AboutImport.update({
  id: "/about",
  path: "/about",
  getParentRoute: () => rootRoute,
} as any);

const AuthRoute = AuthImport.update({
  id: "/_auth",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const AuthTransactionsRoute = AuthTransactionsImport.update({
  id: "/transactions",
  path: "/transactions",
  getParentRoute: () => AuthRoute,
} as any);

const AuthSettingsRoute = AuthSettingsImport.update({
  id: "/settings",
  path: "/settings",
  getParentRoute: () => AuthRoute,
} as any);

const AuthDashboardRoute = AuthDashboardImport.update({
  id: "/dashboard",
  path: "/dashboard",
  getParentRoute: () => AuthRoute,
} as any);

const AuthCategoriesRoute = AuthCategoriesImport.update({
  id: "/categories",
  path: "/categories",
  getParentRoute: () => AuthRoute,
} as any);

const AuthAccountsRoute = AuthAccountsImport.update({
  id: "/accounts",
  path: "/accounts",
  getParentRoute: () => AuthRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/_auth": {
      id: "/_auth";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof AuthImport;
      parentRoute: typeof rootRoute;
    };
    "/about": {
      id: "/about";
      path: "/about";
      fullPath: "/about";
      preLoaderRoute: typeof AboutImport;
      parentRoute: typeof rootRoute;
    };
    "/login": {
      id: "/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof LoginImport;
      parentRoute: typeof rootRoute;
    };
    "/_auth/accounts": {
      id: "/_auth/accounts";
      path: "/accounts";
      fullPath: "/accounts";
      preLoaderRoute: typeof AuthAccountsImport;
      parentRoute: typeof AuthImport;
    };
    "/_auth/categories": {
      id: "/_auth/categories";
      path: "/categories";
      fullPath: "/categories";
      preLoaderRoute: typeof AuthCategoriesImport;
      parentRoute: typeof AuthImport;
    };
    "/_auth/dashboard": {
      id: "/_auth/dashboard";
      path: "/dashboard";
      fullPath: "/dashboard";
      preLoaderRoute: typeof AuthDashboardImport;
      parentRoute: typeof AuthImport;
    };
    "/_auth/settings": {
      id: "/_auth/settings";
      path: "/settings";
      fullPath: "/settings";
      preLoaderRoute: typeof AuthSettingsImport;
      parentRoute: typeof AuthImport;
    };
    "/_auth/transactions": {
      id: "/_auth/transactions";
      path: "/transactions";
      fullPath: "/transactions";
      preLoaderRoute: typeof AuthTransactionsImport;
      parentRoute: typeof AuthImport;
    };
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthAccountsRoute: typeof AuthAccountsRoute;
  AuthCategoriesRoute: typeof AuthCategoriesRoute;
  AuthDashboardRoute: typeof AuthDashboardRoute;
  AuthSettingsRoute: typeof AuthSettingsRoute;
  AuthTransactionsRoute: typeof AuthTransactionsRoute;
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthAccountsRoute: AuthAccountsRoute,
  AuthCategoriesRoute: AuthCategoriesRoute,
  AuthDashboardRoute: AuthDashboardRoute,
  AuthSettingsRoute: AuthSettingsRoute,
  AuthTransactionsRoute: AuthTransactionsRoute,
};

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "": typeof AuthRouteWithChildren;
  "/about": typeof AboutRoute;
  "/login": typeof LoginRoute;
  "/accounts": typeof AuthAccountsRoute;
  "/categories": typeof AuthCategoriesRoute;
  "/dashboard": typeof AuthDashboardRoute;
  "/settings": typeof AuthSettingsRoute;
  "/transactions": typeof AuthTransactionsRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "": typeof AuthRouteWithChildren;
  "/about": typeof AboutRoute;
  "/login": typeof LoginRoute;
  "/accounts": typeof AuthAccountsRoute;
  "/categories": typeof AuthCategoriesRoute;
  "/dashboard": typeof AuthDashboardRoute;
  "/settings": typeof AuthSettingsRoute;
  "/transactions": typeof AuthTransactionsRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/_auth": typeof AuthRouteWithChildren;
  "/about": typeof AboutRoute;
  "/login": typeof LoginRoute;
  "/_auth/accounts": typeof AuthAccountsRoute;
  "/_auth/categories": typeof AuthCategoriesRoute;
  "/_auth/dashboard": typeof AuthDashboardRoute;
  "/_auth/settings": typeof AuthSettingsRoute;
  "/_auth/transactions": typeof AuthTransactionsRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | ""
    | "/about"
    | "/login"
    | "/accounts"
    | "/categories"
    | "/dashboard"
    | "/settings"
    | "/transactions";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | ""
    | "/about"
    | "/login"
    | "/accounts"
    | "/categories"
    | "/dashboard"
    | "/settings"
    | "/transactions";
  id:
    | "__root__"
    | "/"
    | "/_auth"
    | "/about"
    | "/login"
    | "/_auth/accounts"
    | "/_auth/categories"
    | "/_auth/dashboard"
    | "/_auth/settings"
    | "/_auth/transactions";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AuthRoute: typeof AuthRouteWithChildren;
  AboutRoute: typeof AboutRoute;
  LoginRoute: typeof LoginRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  AboutRoute: AboutRoute,
  LoginRoute: LoginRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/about",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/accounts",
        "/_auth/categories",
        "/_auth/dashboard",
        "/_auth/settings",
        "/_auth/transactions"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_auth/accounts": {
      "filePath": "_auth.accounts.tsx",
      "parent": "/_auth"
    },
    "/_auth/categories": {
      "filePath": "_auth.categories.tsx",
      "parent": "/_auth"
    },
    "/_auth/dashboard": {
      "filePath": "_auth.dashboard.tsx",
      "parent": "/_auth"
    },
    "/_auth/settings": {
      "filePath": "_auth.settings.tsx",
      "parent": "/_auth"
    },
    "/_auth/transactions": {
      "filePath": "_auth.transactions.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
